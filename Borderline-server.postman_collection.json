{
	"variables": [],
	"info": {
		"name": "Borderline-server",
		"_postman_id": "10a8c0b6-32de-173e-6834-2b94956f686b",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Registry",
			"description": "",
			"item": [
				{
					"name": "GET status",
					"request": {
						"url": "http://localhost:3000/status",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET full details",
					"request": {
						"url": "http://localhost:3000/details",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Data store",
			"description": "",
			"item": [
				{
					"name": "List all data sources",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/data_sources",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Post new  data source and save the data_source_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"data_source_id\", jsonData._id);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/data_sources",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n      \"sourceType\": \"TS171\",\n      \"sourceName\": \"etriks dev\",\n      \"sourceHost\": \"http://postgres-ci.transmartfoundation.org/transmart/\",\n      \"public\": false,\n      \"default\": false,\n      \"users\": [ ]\n    }"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get current data source from data_source_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/data_sources/{{data_source_id}}",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update current data source from data_source_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/data_sources/{{data_source_id}}",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "  {\n    \"sourceType\": \"TS171\",\n    \"sourceName\": \"etriks dev 2\",\n    \"sourceHost\": \"http://postgres-ci.transmartfoundation.org/transmart/\",\n    \"public\": true,\n    \"default\": true,\n    \"users\": [ ]\n  }"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Remove current data source from its data_source_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"postman.clearEnvironmentVariable(\"data_source_id\");"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/data_sources/{{data_source_id}}",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get data sources by user ID",
					"request": {
						"url": "http://localhost:3000/users/{{user_id}}/data_sources/",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Subscribe user to data source",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/{{user_id}}/data_sources/{{data_source_id}}",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"username\": \"admin\",\n  \"password\": \"admin\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Unsubscribe user from data source ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/{{user_id}}/data_sources/{{data_source_id}}",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Get data source with invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/data_sources/notvalidid",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Update data source from invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');",
									""
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/data_sources/coucouhibou",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "  {\n    \"sourceType\": \"etriks\",\n    \"sourceName\": \"etriks dev 2\",\n    \"sourceHost\": \"http://postgres-ci.transmartfoundation.org/transmart/\",\n    \"public\": true,\n    \"default\": true,\n    \"users\": [ \"588a12defed9e3372453ba3d\" ]\n  }"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Remove data source from invalid data_source_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/data_sources/notavalidid",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error]Subscribe current user to unknown data source",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/{{user_id}}/data_sources/notavaliddatasourceid",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"username\": \"admin\",\n  \"password\": \"admin\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Unsubscribe invalid user from data source",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/NOPE/data_sources/{{data_source_id}}",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Extension Store",
			"description": "",
			"item": [
				{
					"name": "List extensions",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.clearEnvironmentVariable(\"pluginID\");"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/extension_store",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": [
						{
							"id": "6f1ac7dd-b443-43b8-95bb-00ea45521708",
							"name": "pluginList",
							"originalRequest": {
								"url": "http://localhost:3000/plugin_store",
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "1901",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 19 Jan 2017 11:56:15 GMT",
									"description": ""
								},
								{
									"name": "ETag",
									"key": "ETag",
									"value": "W/\"76d-Uzr4RiY/CPYTNrUGxBIXaQ\"",
									"description": ""
								},
								{
									"name": "X-Content-Type-Options",
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Express",
									"description": ""
								}
							],
							"cookie": [],
							"responseTime": "13",
							"body": "{\"count\":5,\"plugins\":[{\"id\":\"9f0851a6167a\",\"infos\":{\"name\":\"dummy-plugin\",\"version\":\"0.1.0\",\"private\":true,\"description\":\"Dummy borderline server plugin\",\"author\":\"Zirg\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dsi-icl/borderline-ui.git\"},\"bugs\":{\"url\":\"https://github.com/dsi-icl/borderline-ui/issues\"},\"homepage\":\"https://github.com/dsi-icl/borderline-ui#readme\"}},{\"id\":\"b93c6c117c07\",\"infos\":{\"name\":\"dummy-plugin\",\"version\":\"0.1.0\",\"private\":true,\"description\":\"Dummy borderline server plugin\",\"author\":\"Zirg\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dsi-icl/borderline-ui.git\"},\"bugs\":{\"url\":\"https://github.com/dsi-icl/borderline-ui/issues\"},\"homepage\":\"https://github.com/dsi-icl/borderline-ui#readme\"}},{\"id\":\"dummy\",\"infos\":{\"name\":\"dummy-plugin\",\"version\":\"0.1.0\",\"private\":true,\"description\":\"Dummy borderline server plugin\",\"author\":\"Zirg\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dsi-icl/borderline-ui.git\"},\"bugs\":{\"url\":\"https://github.com/dsi-icl/borderline-ui/issues\"},\"homepage\":\"https://github.com/dsi-icl/borderline-ui#readme\"}},{\"id\":\"b74b4dd75b6e\",\"infos\":{\"name\":\"dummy-plugin\",\"version\":\"0.1.0\",\"private\":true,\"description\":\"Dummy borderline server plugin\",\"author\":\"Zirg\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dsi-icl/borderline-ui.git\"},\"bugs\":{\"url\":\"https://github.com/dsi-icl/borderline-ui/issues\"},\"homepage\":\"https://github.com/dsi-icl/borderline-ui#readme\"}},{\"id\":\"3b9febc1d233\",\"infos\":{\"name\":\"dummy-plugin\",\"version\":\"0.1.0\",\"private\":true,\"description\":\"Dummy borderline server plugin\",\"author\":\"Zirg\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dsi-icl/borderline-ui.git\"},\"bugs\":{\"url\":\"https://github.com/dsi-icl/borderline-ui/issues\"},\"homepage\":\"https://github.com/dsi-icl/borderline-ui#readme\"}}]}"
						},
						{
							"id": "55c7febb-a413-48b7-a5d6-f98365c4a6a1",
							"name": "pluginList",
							"originalRequest": {
								"url": "http://localhost:3000/plugin_store",
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "1901",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 19 Jan 2017 11:56:15 GMT",
									"description": ""
								},
								{
									"name": "ETag",
									"key": "ETag",
									"value": "W/\"76d-Uzr4RiY/CPYTNrUGxBIXaQ\"",
									"description": ""
								},
								{
									"name": "X-Content-Type-Options",
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Express",
									"description": ""
								}
							],
							"cookie": [],
							"responseTime": "13",
							"body": "{\"count\":5,\"plugins\":[{\"id\":\"9f0851a6167a\",\"infos\":{\"name\":\"dummy-plugin\",\"version\":\"0.1.0\",\"private\":true,\"description\":\"Dummy borderline server plugin\",\"author\":\"Zirg\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dsi-icl/borderline-ui.git\"},\"bugs\":{\"url\":\"https://github.com/dsi-icl/borderline-ui/issues\"},\"homepage\":\"https://github.com/dsi-icl/borderline-ui#readme\"}},{\"id\":\"b93c6c117c07\",\"infos\":{\"name\":\"dummy-plugin\",\"version\":\"0.1.0\",\"private\":true,\"description\":\"Dummy borderline server plugin\",\"author\":\"Zirg\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dsi-icl/borderline-ui.git\"},\"bugs\":{\"url\":\"https://github.com/dsi-icl/borderline-ui/issues\"},\"homepage\":\"https://github.com/dsi-icl/borderline-ui#readme\"}},{\"id\":\"dummy\",\"infos\":{\"name\":\"dummy-plugin\",\"version\":\"0.1.0\",\"private\":true,\"description\":\"Dummy borderline server plugin\",\"author\":\"Zirg\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dsi-icl/borderline-ui.git\"},\"bugs\":{\"url\":\"https://github.com/dsi-icl/borderline-ui/issues\"},\"homepage\":\"https://github.com/dsi-icl/borderline-ui#readme\"}},{\"id\":\"b74b4dd75b6e\",\"infos\":{\"name\":\"dummy-plugin\",\"version\":\"0.1.0\",\"private\":true,\"description\":\"Dummy borderline server plugin\",\"author\":\"Zirg\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dsi-icl/borderline-ui.git\"},\"bugs\":{\"url\":\"https://github.com/dsi-icl/borderline-ui/issues\"},\"homepage\":\"https://github.com/dsi-icl/borderline-ui#readme\"}},{\"id\":\"3b9febc1d233\",\"infos\":{\"name\":\"dummy-plugin\",\"version\":\"0.1.0\",\"private\":true,\"description\":\"Dummy borderline server plugin\",\"author\":\"Zirg\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dsi-icl/borderline-ui.git\"},\"bugs\":{\"url\":\"https://github.com/dsi-icl/borderline-ui/issues\"},\"homepage\":\"https://github.com/dsi-icl/borderline-ui#readme\"}}]}"
						}
					]
				},
				{
					"name": "Upload new extension and save plugin_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"No errors\"] = jsonData.hasOwnProperty('error') === false;",
									"tests[\"New plugin ID is present\"] = jsonData[0].hasOwnProperty('_id');",
									"",
									"postman.setEnvironmentVariable(\"pluginID\", jsonData[0]._id);"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/extension_store",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "plugin-zip",
									"type": "file",
									"src": "README.md"
								}
							]
						},
						"description": "Generated from a curl request: \ncurl \\\"http://localhost:3000/plugin_store\\\" -H \\\"Origin: http://localhost:3000\\\" -H \\\"Accept-Encoding: gzip, deflate, br\\\" -H \\\"Accept-Language: en-US,en;q=0.8,fr;q=0.6\\\" -H \\\"Upgrade-Insecure-Requests: 1\\\" -H \\\"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36\\\" -H \\\"Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryxFUlaPpsXgLyGi9y\\\" -H \\\"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\\\" -H \\\"Cache-Control: max-age=0\\\" -H \\\"Referer: http://localhost:3000/plugin_store/upload\\\" -H \\\"Connection: keep-alive\\\" -H \\\"DNT: 1\\\" --data-binary ^\\\"------WebKitFormBoundaryxFUlaPpsXgLyGi9y^\n\nContent-Disposition: form-data; name=^\\^\\\"plugin-zip^\\^\\\"; filename=^\\^\\\"dummy.zip^\\^\\\"^\n\nContent-Type: application/x-zip-compressed^\n\n^\n\n^\n\n------WebKitFormBoundaryxFUlaPpsXgLyGi9y--^\n\n^\\\" --compressed"
					},
					"response": [
						{
							"id": "85504999-817e-4b16-8fad-b188a52922bb",
							"name": "pluginUploaded",
							"originalRequest": {
								"url": "http://localhost:3000/plugin_store",
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "23",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 19 Jan 2017 11:55:47 GMT",
									"description": ""
								},
								{
									"name": "ETag",
									"key": "ETag",
									"value": "W/\"17-agRQRT6BI3xnOccrfflWBQ\"",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Express",
									"description": ""
								}
							],
							"cookie": [],
							"responseTime": "23",
							"body": "[{\"id\":\"3b9febc1d233\"}]"
						},
						{
							"id": "bf5c2fae-c931-4292-b63f-471dfe01e7a6",
							"name": "pluginUpload",
							"originalRequest": {
								"url": "http://localhost:3000/plugin_store",
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "23",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 19 Jan 2017 12:01:35 GMT",
									"description": ""
								},
								{
									"name": "ETag",
									"key": "ETag",
									"value": "W/\"17-jag58ZyQFKaxf1ArOM+98w\"",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Express",
									"description": ""
								}
							],
							"cookie": [],
							"responseTime": "23",
							"body": "[{\"id\":\"859ddffc98d7\"}]"
						}
					]
				},
				{
					"name": "Get extension info for current plugin_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/extension_store/{{pluginID}}",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Extension replace files identified by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Plugin has been updated\"] = jsonData._id === postman.getEnvironmentVariable('pluginID');",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/extension_store/{{pluginID}}",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "plugin-zip",
									"type": "file",
									"src": ".gitignore"
								}
							]
						},
						"description": "Generated from a curl request: \ncurl \\\"http://localhost:3000/plugin_store\\\" -H \\\"Origin: http://localhost:3000\\\" -H \\\"Accept-Encoding: gzip, deflate, br\\\" -H \\\"Accept-Language: en-US,en;q=0.8,fr;q=0.6\\\" -H \\\"Upgrade-Insecure-Requests: 1\\\" -H \\\"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36\\\" -H \\\"Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryxFUlaPpsXgLyGi9y\\\" -H \\\"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\\\" -H \\\"Cache-Control: max-age=0\\\" -H \\\"Referer: http://localhost:3000/plugin_store/upload\\\" -H \\\"Connection: keep-alive\\\" -H \\\"DNT: 1\\\" --data-binary ^\\\"------WebKitFormBoundaryxFUlaPpsXgLyGi9y^\n\nContent-Disposition: form-data; name=^\\^\\\"plugin-zip^\\^\\\"; filename=^\\^\\\"dummy.zip^\\^\\\"^\n\nContent-Type: application/x-zip-compressed^\n\n^\n\n^\n\n------WebKitFormBoundaryxFUlaPpsXgLyGi9y--^\n\n^\\\" --compressed"
					},
					"response": [
						{
							"id": "53917755-74f1-4843-9bc4-6cc1a8930b37",
							"name": "pluginUploaded",
							"originalRequest": {
								"url": "http://localhost:3000/plugin_store",
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "23",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 19 Jan 2017 11:55:47 GMT",
									"description": ""
								},
								{
									"name": "ETag",
									"key": "ETag",
									"value": "W/\"17-agRQRT6BI3xnOccrfflWBQ\"",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Express",
									"description": ""
								}
							],
							"cookie": [],
							"responseTime": "23",
							"body": "[{\"id\":\"3b9febc1d233\"}]"
						},
						{
							"id": "407307d3-b3df-4ba9-9862-c441eb63e326",
							"name": "pluginUpload",
							"originalRequest": {
								"url": "http://localhost:3000/plugin_store",
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "23",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 19 Jan 2017 12:01:35 GMT",
									"description": ""
								},
								{
									"name": "ETag",
									"key": "ETag",
									"value": "W/\"17-jag58ZyQFKaxf1ArOM+98w\"",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Express",
									"description": ""
								}
							],
							"cookie": [],
							"responseTime": "23",
							"body": "[{\"id\":\"859ddffc98d7\"}]"
						}
					]
				},
				{
					"name": "Delete extension from it's unique ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/extension_store/{{pluginID}}",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Extension update with invalid extension id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/extension_store/notavliadpluginid",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "plugin-zip",
									"type": "file",
									"src": "chat-0.0.1.zip"
								}
							]
						},
						"description": "Generated from a curl request: \ncurl \\\"http://localhost:3000/plugin_store\\\" -H \\\"Origin: http://localhost:3000\\\" -H \\\"Accept-Encoding: gzip, deflate, br\\\" -H \\\"Accept-Language: en-US,en;q=0.8,fr;q=0.6\\\" -H \\\"Upgrade-Insecure-Requests: 1\\\" -H \\\"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36\\\" -H \\\"Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryxFUlaPpsXgLyGi9y\\\" -H \\\"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\\\" -H \\\"Cache-Control: max-age=0\\\" -H \\\"Referer: http://localhost:3000/plugin_store/upload\\\" -H \\\"Connection: keep-alive\\\" -H \\\"DNT: 1\\\" --data-binary ^\\\"------WebKitFormBoundaryxFUlaPpsXgLyGi9y^\n\nContent-Disposition: form-data; name=^\\^\\\"plugin-zip^\\^\\\"; filename=^\\^\\\"dummy.zip^\\^\\\"^\n\nContent-Type: application/x-zip-compressed^\n\n^\n\n^\n\n------WebKitFormBoundaryxFUlaPpsXgLyGi9y--^\n\n^\\\" --compressed"
					},
					"response": [
						{
							"id": "0c70252c-fd89-4f3f-a1fc-f686c679de44",
							"name": "pluginUploaded",
							"originalRequest": {
								"url": "http://localhost:3000/plugin_store",
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "23",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 19 Jan 2017 11:55:47 GMT",
									"description": ""
								},
								{
									"name": "ETag",
									"key": "ETag",
									"value": "W/\"17-agRQRT6BI3xnOccrfflWBQ\"",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Express",
									"description": ""
								}
							],
							"cookie": [],
							"responseTime": "23",
							"body": "[{\"id\":\"3b9febc1d233\"}]"
						},
						{
							"id": "0687b5b6-b60e-4253-8afc-1b3e60d6c8f2",
							"name": "pluginUpload",
							"originalRequest": {
								"url": "http://localhost:3000/plugin_store",
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "Connection",
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"name": "Content-Length",
									"key": "Content-Length",
									"value": "23",
									"description": ""
								},
								{
									"name": "Content-Type",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"description": ""
								},
								{
									"name": "Date",
									"key": "Date",
									"value": "Thu, 19 Jan 2017 12:01:35 GMT",
									"description": ""
								},
								{
									"name": "ETag",
									"key": "ETag",
									"value": "W/\"17-jag58ZyQFKaxf1ArOM+98w\"",
									"description": ""
								},
								{
									"name": "X-Powered-By",
									"key": "X-Powered-By",
									"value": "Express",
									"description": ""
								}
							],
							"cookie": [],
							"responseTime": "23",
							"body": "[{\"id\":\"859ddffc98d7\"}]"
						}
					]
				},
				{
					"name": "[Error] Get plugin description from invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/extension_store/notavalidplugin",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Delete extension with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/extension_store/nonostillnotvalid",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "User Accounts",
			"description": "",
			"item": [
				{
					"name": "Login as admin and save user id for use",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"User has ID\"] = jsonData.hasOwnProperty('_id');",
									"",
									"",
									"postman.setEnvironmentVariable(\"user_id\", jsonData._id);"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/login",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							},
							{
								"key": "Cookie",
								"value": "test=test;toto=toto",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "root",
									"type": "text"
								},
								{
									"key": "password",
									"value": "root",
									"type": "text"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "List all users on the server. requires admin rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Who Am I",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/whoami",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Logout and close session",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/logout",
						"method": "POST",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get current user from user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"User has ID\"] = jsonData.hasOwnProperty('_id');",
									"postman.setEnvironmentVariable(\"user_id\", jsonData._id);"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/{{user_id}}",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update current user from user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/{{user_id}}",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"_id\": \"588b715469a1b64140e00b8a\",\n  \"username\": \"root\",\n  \"salt\": \"1fc162ade209d19e3db9ead000df7d2f\",\n  \"password\": \"1e3ec0ba8a479f3c16169bd2f31b0c5bdc022fbf3a5f4021eaa589c3891f5fa63453f38b1c0f404e183ab24ff47622328b58b9db0cf0d15e09f9f07ec189d717\",\n  \"admin\": true\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete user from user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/{{user_id}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Regenerate 2 Step  QR code",
					"request": {
						"url": "http://localhost:3000/2step/{{user_id}}",
						"method": "PUT",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] User login  with invalid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');",
									""
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/login",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "nope",
									"type": "text",
									"disabled": true
								},
								{
									"key": "password",
									"value": "root",
									"type": "text",
									"disabled": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] List user without admin rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users",
						"method": "GET",
						"header": [
							{
								"key": "Connection",
								"value": "close",
								"description": "",
								"disabled": true
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Get current user with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/iamnotavalidid",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Update invalid user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/nono",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"_id\": \"iamnotavaliduserid\",\n  \"username\": \"root\",\n  \"salt\": \"1fc162ade209d19e3db9ead000df7d2f\",\n  \"password\": \"1e3ec0ba8a479f3c16169bd2f31b0c5bdc022fbf3a5f4021eaa589c3891f5fa63453f38b1c0f404e183ab24ff47622328b58b9db0cf0d15e09f9f07ec189d717\",\n  \"admin\": true\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Delete unknown user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/nonoiamnotokay",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get the user for the current session and save user id for use",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/whoami",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "User extensions",
			"description": "",
			"item": [
				{
					"name": "List all plugins for user identifed by ID",
					"request": {
						"url": "http://localhost:3000/users/{{user_id}}/extensions",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Clear all plugins for user defined by ID",
					"request": {
						"url": "http://localhost:3000/users/{{user_id}}/extensions",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Subscribe user identfied by ID to plugin identified by ID",
					"request": {
						"url": "http://localhost:3000/users/{{user_id}}/extensions/{{pluginID}}",
						"method": "PUT",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Unsubscribe user identified by ID to plugin identified by ID",
					"request": {
						"url": "http://localhost:3000/users/{{user_id}}/extensions/{{pluginID}}",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] List all plugins for invalid user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/invalidid/extensions",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Clear all plugins for invalid user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/invaliduserid/extensions",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Subscribe invalid user to valid plugin",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/nonoinvalid/extensions/{{pluginID}}",
						"method": "PUT",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Subscribe valid user to invalid plugin",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/users/{{user_id}}/extensions/nonoinvalidplugin",
						"method": "PUT",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Workflows",
			"description": "",
			"item": [
				{
					"name": "List workflows on the server",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create a new workflow and save its ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"workflow has been created\"] = jsonData.hasOwnProperty('_id');",
									"",
									"",
									"postman.setEnvironmentVariable(\"workflow_ID\", jsonData._id);"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Postman Workflow",
									"type": "text"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get a workflow from its unique identifier",
					"request": {
						"url": "http://localhost:3000/workflow/{{workflow_ID}}/",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update name field for workflow_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Updated name\"] = jsonData.name === \"Updated Workflow name\";"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/{{workflow_ID}}",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"_id\": \"{{workflow_ID}}\",\n  \"name\": \"Updated Workflow name\",\n  \"create\": \"6405499313127948289\",\n  \"update\": \"6405499313127948290\",\n  \"owner\": \"58a198229bc4ca3bb81c937a\",\n  \"read\": [],\n  \"write\": [],\n  \"graph\": {}\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete workflow based on workflow_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/{{workflow_ID}}",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create root node in current workflow_id and store step_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Inserted has id\"] = jsonData.hasOwnProperty('_id');",
									"",
									"",
									"postman.setEnvironmentVariable(\"step_ID\", jsonData._id);"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/{{workflow_ID}}/step/",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"parent\": null,\n  \"extension\": \"toto-extension\",\n  \"action\": \"@@/workflow/ANALYSIS_INPUT\",\n  \"data\": {\n    \"custom\": true,\n    \"useless\": true\n  }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create child node under step_id in current workflow_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Inserted has id\"] = jsonData.hasOwnProperty('_id');",
									""
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/{{workflow_ID}}/step/",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"parent\": \"{{step_ID}}\",\n  \"extension\": \"child-extension\",\n  \"action\": \"@@/workflow/RESULT_CANVAS\",\n  \"data\": {\n    \"custom\": true,\n    \"useless\": true\n  }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get step_id from current workflow_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/{{workflow_ID}}/step/{{step_ID}}",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update step_id inside current workflow_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Your test name\"] = jsonData.data.updated === true;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/{{workflow_ID}}/step/{{step_ID}}",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"_id\": \"{{step_ID}}\",\n  \"create\": \"2017-04-06T09:54:50.044Z\",\n  \"update\": \"2017-04-06T09:54:55.286Z\",\n  \"workflow\": \"{{workflow_ID}}\",\n  \"parent\": null,\n  \"extension\": \"toto-extension\",\n  \"action\": \"@@/workflow/ANALYSIS_INPUT\",\n  \"data\": {\n    \"custom\": false,\n    \"useless\": false,\n    \"updated\": true\n  }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete step_id inside curent workflow_id",
					"request": {
						"url": "http://localhost:3000/workflow/{{workflow_ID}}/step/{{step_ID}}",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Get a workflow from invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/iamnotaworkflow",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Update name field for invalid workflow ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/nonopasbon",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"_id\": \"{{workflow_ID}}\",\n  \"name\": \"Updated Workflow name\",\n  \"create\": \"6405499313127948289\",\n  \"update\": \"6405499313127948290\",\n  \"owner\": \"58a198229bc4ca3bb81c937a\",\n  \"read\": [],\n  \"write\": [],\n  \"graph\": {}\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Delete workflow with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/nonoworkflow",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Create root node in invalid workflow_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/nopenopenope/step/",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"parent\": null,\n  \"extension\": \"toto-extension\",\n  \"action\": \"@@/workflow/ANALYSIS_INPUT\",\n  \"data\": {\n    \"custom\": true,\n    \"useless\": true\n  }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Get invalid step_id from current workflow_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/{{workflow_ID}}/step/nopnostep",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Update invalid step_id inside current workflow_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/{{workflow_ID}}/step/nopestepid",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"_id\": \"{{step_ID}}\",\n  \"create\": \"2017-04-06T09:54:50.044Z\",\n  \"update\": \"2017-04-06T09:54:55.286Z\",\n  \"workflow\": \"58e50d40f1072427c419b775\",\n  \"parent\": null,\n  \"extension\": \"toto-extension\",\n  \"action\": \"@@/workflow/ANALYSIS_INPUT\",\n  \"data\": {\n    \"custom\": false,\n    \"useless\": false,\n    \"updated\": true\n  }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Delete invalid step_id inside curent workflow_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/{{workflow_ID}}/step/notavlidstep",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[Error] Get invalid step_id from current workflow_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"isError\"] = jsonData.hasOwnProperty('error');"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:3000/workflow/{{workflow_ID}}/step/nopnostep",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}